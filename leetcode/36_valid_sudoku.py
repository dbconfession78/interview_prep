# Instructions
"""
Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.

The Sudoku board could be partially filled, where empty cells are filled with the character '.'.


A partially filled sudoku which is valid.

Note:
A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.
"""

from collections import Counter
class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        # for row in board:
        #     print(row)

        i = 0
        if not self.rows_are_valid(board):
            return False
        if not self.cols_are_valid(board):
            return False
        while i < len(board):
            j = 0
            while j < len(board):
                if not self.sub_box_is_valid(board, i, j):
                    return False
                j += 3
            i += 3
        return True

    def rows_are_valid(self, board):
        for row in board:
            counter = Counter()
            for cell in row:
                if cell != '.':
                    if counter.get(cell) == 1:
                        return False
                    counter[cell] += 1
        return True

    def cols_are_valid(self, board):
        """
        checks to see if all rows contain only 1
        :param board: the board to check
        :return: True if all rows are valid
        """
        for j in range(9):
            counter = Counter()
            for i in range(9):

                cell = board[i][j]
                if cell != '.':
                    if counter.get(cell) or not cell.isdigit() or cell == '0':
                        return False
                    counter[board[i][j]] += 1
        return True

    def sub_box_is_valid(self, board, i, j):
        counter = Counter()
        sub_box = [board[i][j: j+3], board[i+1][j: j+3], board[i+2][j:j+3]]
        for row in sub_box:
            for cell in row:
                if cell != '.':
                    if counter.get(cell) and counter.get(cell) == 1:
                        return False
                    counter[cell] += 1
        return True




def main():
    print(Solution().isValidSudoku(([[".", "8", "7", "6", "5", "4", "3", "2", "1"],
                                     ["2", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["3", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["4", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["5", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["6", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["7", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["8", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["9", ".", ".", ".", ".", ".", ".", ".", "."]])))  # True

    print(Solution().isValidSudoku(([[".", "8", "7", "6", "5", "4", "3", "2", "1"],
                                     ["2", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["3", ".", ".", ".", ".", ".", ".", "2", "."],
                                     ["4", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["5", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["6", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["7", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["8", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["9", ".", ".", ".", ".", ".", ".", ".", "."]])))  # False

    print(Solution().isValidSudoku(([[".", "8", "7", "6", "5", "4", "3", "2", "1"],
                                     ["2", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["3", ".", ".", ".", ".", "3", ".", ".", "."],
                                     ["4", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["5", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["6", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["7", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["8", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["9", ".", ".", ".", ".", ".", ".", ".", "."]])))  # False

    print(Solution().isValidSudoku(([[".", "8", "7", "6", "5", "4", "3", "2", "1"],
                                     ["2", "3", "4", ".", ".", ".", ".", ".", "."],
                                     ["3", "5", "8", ".", ".", ".", ".", ".", "."],
                                     ["4", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["5", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["6", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["7", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["8", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["9", ".", ".", ".", ".", ".", ".", ".", "."]])))  # False

    print(Solution().isValidSudoku(([[".", "8", "7", "6", "5", "4", "3", "2", "1"],
                                     ["2", "9", "4", ".", ".", ".", ".", ".", "."],
                                     ["3", "5", "6", ".", ".", ".", ".", ".", "."],
                                     ["4", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["5", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["6", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["7", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["8", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["9", ".", ".", ".", ".", ".", ".", ".", "."]])))  # True

    # instructions say valid is 1-9, but LC checker allows for 0 and returns True
    print(Solution().isValidSudoku(([[".", "8", "7", "6", "5", "4", "3", "2", "1"],
                                     ["2", "9", "4", ".", ".", ".", ".", ".", "."],
                                     ["3", "5", "6", ".", ".", ".", ".", ".", "."],
                                     ["4", ".", ".", ".", "0", ".", ".", ".", "."],
                                     ["5", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["6", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["7", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["8", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["9", ".", ".", ".", ".", ".", ".", ".", "."]])))  # False

    # LC checker breaks if you try testing a non 0-9
    print(Solution().isValidSudoku(([[".", "8", "7", "6", "5", "4", "3", "2", "1"],
                                     ["2", "9", "4", ".", ".", ".", ".", ".", "."],
                                     ["3", "5", "6", ".", ".", ".", ".", ".", "."],
                                     ["4", ".", ".", ".", "a", ".", ".", ".", "."],
                                     ["5", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["6", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["7", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["8", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["9", ".", ".", ".", ".", ".", ".", ".", "."]])))  # False

    print(Solution().isValidSudoku(([[".", ".", "4", ".", ".", ".", "6", "3", "."],
                                     [".", ".", ".", ".", ".", ".", ".", ".", "."],
                                     ["5", ".", ".", ".", ".", ".", ".", "9", "."],
                                     [".", ".", ".", "5", "6", ".", ".", ".", "."],
                                     ["4", ".", "3", ".", ".", ".", ".", ".", "1"],
                                     [".", ".", ".", "7", ".", ".", ".", ".", "."],
                                     [".", ".", ".", "5", ".", ".", ".", ".", "."],
                                     [".", ".", ".", ".", ".", ".", ".", ".", "."],
                                     [".", ".", ".", ".", ".", ".", ".", ".", "."]])))  # False


if __name__ == '__main__':
    main()


# LC input
# [[".", "8", "7", "6", "5", "4", "3", "2", "1"],["2", ".", ".", ".", ".", ".", ".", ".", "."],["3", ".", ".", ".", ".", ".", ".", ".", "."],["4", ".", ".", ".", ".", ".", ".", ".", "."],["5", ".", ".", ".", ".", ".", ".", ".", "."],["6", ".", ".", ".", ".", ".", ".", ".", "."],["7", ".", ".", ".", ".", ".", ".", ".", "."],["8", ".", ".", ".", ".", ".", ".", ".", "."],["9", ".", ".", ".", ".", ".", ".", ".", "."]]
# [[".", "8", "7", "6", "5", "4", "3", "2", "1"],["2", ".", ".", ".", ".", ".", ".", ".", "."],["3", ".", ".", ".", ".", ".", ".", "2", "."],["4", ".", ".", ".", ".", ".", ".", ".", "."],["5", ".", ".", ".", ".", ".", ".", ".", "."],["6", ".", ".", ".", ".", ".", ".", ".", "."],["7", ".", ".", ".", ".", ".", ".", ".", "."],["8", ".", ".", ".", ".", ".", ".", ".", "."],["9", ".", ".", ".", ".", ".", ".", ".", "."]]
# [[".", "8", "7", "6", "5", "4", "3", "2", "1"],["2", ".", ".", ".", ".", ".", ".", ".", "."],["3", ".", ".", ".", ".", "3", ".", ".", "."],["4", ".", ".", ".", ".", ".", ".", ".", "."],["5", ".", ".", ".", ".", ".", ".", ".", "."],["6", ".", ".", ".", ".", ".", ".", ".", "."],["7", ".", ".", ".", ".", ".", ".", ".", "."],["8", ".", ".", ".", ".", ".", ".", ".", "."],["9", ".", ".", ".", ".", ".", ".", ".", "."]]
# [[".", "8", "7", "6", "5", "4", "3", "2", "1"],["2", "3", "4", ".", ".", ".", ".", ".", "."],["3", "5", "8", ".", ".", ".", ".", ".", "."],["4", ".", ".", ".", ".", ".", ".", ".", "."],["5", ".", ".", ".", ".", ".", ".", ".", "."],["6", ".", ".", ".", ".", ".", ".", ".", "."],["7", ".", ".", ".", ".", ".", ".", ".", "."],["8", ".", ".", ".", ".", ".", ".", ".", "."],["9", ".", ".", ".", ".", ".", ".", ".", "."]]
# [[".", "8", "7", "6", "5", "4", "3", "2", "1"],["2", "9", "4", ".", ".", ".", ".", ".", "."],["3", "5", "6", ".", ".", ".", ".", ".", "."],["4", ".", ".", ".", ".", ".", ".", ".", "."],["5", ".", ".", ".", ".", ".", ".", ".", "."],["6", ".", ".", ".", ".", ".", ".", ".", "."],["7", ".", ".", ".", ".", ".", ".", ".", "."],["8", ".", ".", ".", ".", ".", ".", ".", "."],["9", ".", ".", ".", ".", ".", ".", ".", "."]]
# [[".", "8", "7", "6", "5", "4", "3", "2", "1"],["2", "9", "4", ".", ".", ".", ".", ".", "."],["3", "5", "6", ".", ".", ".", ".", ".", "."],["4", ".", ".", ".", "0", ".", ".", ".", "."],["5", ".", ".", ".", ".", ".", ".", ".", "."],["6", ".", ".", ".", ".", ".", ".", ".", "."],["7", ".", ".", ".", ".", ".", ".", ".", "."],["8", ".", ".", ".", ".", ".", ".", ".", "."],["9", ".", ".", ".", ".", ".", ".", ".", "."]]
# [[".", ".", "4", ".", ".", ".", "6", "3", "."],[".", ".", ".", ".", ".", ".", ".", ".", "."],["5", ".", ".", ".", ".", ".", ".", "9", "."],[".", ".", ".", "5", "6", ".", ".", ".", "."],["4", ".", "3", ".", ".", ".", ".", ".", "1"],[".", ".", ".", "7", ".", ".", ".", ".", "."],[".", ".", ".", "5", ".", ".", ".", ".", "."],[".", ".", ".", ".", ".", ".", ".", ".", "."],[".", ".", ".", ".", ".", ".", ".", ".", "."]]
