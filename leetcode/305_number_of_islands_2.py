# Instructions
"""
A 2d grid map of m rows and n columns is initially filled with water. We may perform an addLand operation which turns the water at position (row, col) into a land. Given a list of positions to operate, count the number of islands after each addLand operation. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example:

Given m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]].

Initially, the 2d grid grid is filled with water. (Assume 0 represents water and 1 represents land).
0 0 0
0 0 0
0 0 0

Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land.
1 0 0
0 0 0   Number of islands = 1
0 0 0

Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land.
1 1 0
0 0 0   Number of islands = 1
0 0 0

Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land.
1 1 0
0 0 1   Number of islands = 2
0 0 0

Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land.
1 1 0
0 0 1   Number of islands = 3
0 1 0

We return the result as an array: [1, 1, 2, 3]

Challenge:

Can you do it in time complexity O(k log mn), where k is the length of the positions?
"""

import sys
class Solution(object):
    # def numIslands2_SECOND(self, m, n, positions):
    def numIslands2(self, m, n, positions):
        """
         :type m: int
         :type n: int
         :type positions: List[List[int]]
         :rtype: List[int]
         """
        grid = []
        retlst = []
        for _ in range(m):
            grid.append([0 for x in range(n)])

        _map1 = {}
        _map2 = {}
        _id = 0
        count = 0

        # add to maps
        for p, pos in enumerate(positions):
            i = pos[0]
            j = pos[1]
            grid[i][j] = 1
            overlap = set()
            _map1[_id] = []
            _map2[(i, j)] = _id



            l = (i, j-1) if j > 0 else None
            r = (i, j+1) if j < n-1 else None
            u = (i-1, j) if i > 0 else None
            d = (i+1, j) if i < m-1 else None

            neighs = [l, r, u, d]
            n_ids = [_map2.get(x) for x in neighs]
            print()
            for nid in n_ids:
                if nid in _map1:
                    overlap.add(nid)
            if not overlap:
                count += 1
            else:
                if len(overlap) > 1:
                    #TODO
                    pass

            count += (1 - len(overlap))
            self.print_grid(grid)
            print(f'islands: {count}')
            print()



            # chain = []
            # for coord in neighs:
            #     if coord:
            #         if coord in _map2:
            #             _map1[_id].append(_map2[coord])
            #             _map1[_map2[coord]].append(_id)
            #             chain += (_map1[_map2[coord]])
            # for x in chain:
            #     _map1[x] = _map1[x] + chain



            _id += 1
            # if p == 0:
            #     count = 1

        self.print_grid(grid)
        return count


    def add(self, _id):
        pass


    def numIslands2_FIRST(self, m, n, positions):
    # def numIslands2(self, m, n, positions):
        """
        :type m: int
        :type n: int
        :type positions: List[List[int]]
        :rtype: List[int]
        """
        # row = [0 for x in range(n)]
        grid = []
        retlst = []
        for i in range(m):
            grid.append([0 for x in range(n)])
        # print(f'rows: {len(grid)}')
        # print(f'cols: {len(grid[0])}')
        # print(grid[10][78])

        before = grid
        count = 0
        for i, pos in enumerate(positions):
            after = self.add_land(before, pos)
            sys.stdout.write(f'({i}) ')
            count += self.update_island_count(grid, pos)
            count = 1 if count < 1 else count
            print('-------')
            print(f'count: {count}')
            print(f'diff: {count-i}')
            print()
            count = self.count_isalnds(after)
            if retlst:
                last_added = retlst[-1]
            retlst.append(count)
            last_added = retlst[-1]
            before = after

        return retlst


    def update_island_count(self, grid, pos):
        i = pos[0]
        j = pos[1]
        left = grid[i][j-1] if j > 0 else None
        right = grid[i][j+1] if j < len(grid[i])-1 else None
        up = grid[i-1][j] if i > 0 else None
        bottom = grid[i+1][j] if i < len(grid)-1 else None

        print(f'grid[{i}][{j}]: {grid[i][j]}')
        print('================')
        print(f'left: '+ f'{left}' if left is not None else 'left border')
        print(f'right: ' + f'{right}' if right is not None else 'right border')
        print(f'up: ' + f'{up}' if up is not None else 'top border')
        print(f'down: ' + f'{bottom}' if bottom is not None  else 'bottom border')

        conns = 0
        if j < len(grid[i]) - 1:
            if grid[i][j+1] == 1:
                conns += 1
        if i < len(grid) - 1:
            if grid[i+1][j] == 1:
                conns += 1
        if j > 0:
            if grid[i][j-1] == 1:
                conns += 1
        if i > 0:
            if grid[i-1][j] == 1:
                conns += 1
        return 1 - conns

    def add_land(self, grid, pos):
        i = pos[0]
        j = pos[1]
        grid[i][j] = 1
        return grid

    def count_isalnds(self, grid):
        def explore(grid, i, j, seen):
            if i < 0 or i > len(grid) - 1 or j < 0 or j > len(grid[i]) - 1 or grid[i][j] == 0:
                return 0

            # if grid[i][j] == 1:
            grid[i][j] = 0
            seen.append([i, j])

            explore(grid, i, j + 1, seen)
            explore(grid, i + 1, j, seen)
            explore(grid, i, j - 1, seen)
            explore(grid, i - 1, j, seen)
            return 1

        retval = 0
        seen = []
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == 1:
                    retval += explore(grid, i, j, seen)

        while seen:
            pair = seen.pop()
            i = pair[0]
            j = pair[1]
            grid[i][j] = 1
        return retval

    def print_grid(self, grid):
        for row in grid:
            for i, n in enumerate(row):
                x = '1' if n == 1 else '-'
                sys.stdout.write(x)
                if i < len(row):
                    sys.stdout.write(' ')
            print()


def main():
    # expect: [1, 1, 2, 3]
    # print(Solution().numIslands2(3, 3, [[0,0], [0,1], [1,2], [2,1]]))

    print(Solution().numIslands2(5, 7, [[4,5], [3,1], [3,2], [3,4], [3,3], [2,1], [2,4], [1,1], [1,4], [1,2], [1,3], [4,6], [2, 5], [3,6], [0, 5], [0,6], [1,6], [2,6]]))

    # expected []
    # print(Solution().numIslands2(3, 3, []))

    # expected: [1,2,3,4,3,2,1]
    print(Solution().numIslands2(3, 3, [[0,1],[1,2],[2,1],[1,0],[0,2],[0,0],[1,1]]))

    # expected:
    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,46,47,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,61,62,62,62,63,63,64,65,66,67,68,69,70,71,71,72,73,73,74,75,76,77,78,79,79,80,81,82,83,83,83,84,85,86,87,88,88,89,90,91,92,92,93,93,93,94,95,96,97,98,98,99,100,101,100,101,102,103,103,104,105,106,107,108,109,110,110,111,112,111,112,113,114,114,115,116,117,118,118,118,119,120,121,122,122,122,123,124,125,125,125,126,126,126,126,126,126,125,125,126,127,128,129,130,131,132,132,133,134,135,135,135,136,135,136,137,137,138,139,140,140,141,142,143,144,144,144,145,146,146,147,148,149,150,151,152,153,153,154,154,155,155,156,157,157,156,156,157,158,159,158,157,158,159,160,161,162,163,163,163,163,162,163,164,165,164,165,165,166,167,167,167,166,166,166,167,166,166,165,165,166,166,166,166,167,166,167,167,168,169,169,168,168,169,170,171,171,170,170,170,170,170,171,172,172,172,173,174,174,175,175,176,176,177,178,179,179,178,177,177,177,176,176,177,178,179,180,181,181,182,182,183,183,184,183,183,183,182,183,182,182,182,182,182,183,184,184,185,185,185,185,186,186,187,186,186,185,186,187,187,188,189,189,190,191,192,193,193,194,193,193,194,194,194,195,195,196,197,198,198,197,198,197,197,197,197,197,198,199,200,201,201,202,203,203,204,204,203,203,203,203,202,203,203,204,204,204,205,206,207,207,207,207,207,207,208,206,205,204,203,203,203,203,202,202,203,204,204,205,205,205,205,206,207,207,207,208,209,209,208,209,208,208,209,210,210,209,208,206,206,206,205,204,204,203,204,204,204,203,203,203,204,204,205,205,205,204,203,203,201,201,201,201,201,202,203,200,200,200,201,200,200,200,199,199,199,198,198,198,198,198,197,197,197,197,195,195,194,195,194,195,196,196]
    # print(Solution().numIslands2(21, 71, [[19,28],[14,38],[15,44],[17,12],[6,19],[11,69],[2,30],[7,43],[19,6],[7,29],[10,21],[17,55],[20,66],[12,28],[11,64],[12,52],[18,15],[2,52],[10,20],[0,50],[16,5],[17,25],[12,67],[6,45],[13,17],[5,55],[10,42],[20,17],[3,26],[20,61],[14,10],[9,1],[9,69],[6,29],[11,53],[3,66],[4,45],[12,65],[11,35],[5,67],[18,35],[2,57],[12,12],[13,53],[9,65],[13,0],[3,18],[13,39],[5,54],[20,43],[19,29],[17,37],[17,45],[3,38],[2,61],[2,65],[3,21],[5,40],[10,4],[12,36],[2,8],[3,33],[15,4],[13,35],[0,45],[20,29],[10,66],[19,7],[0,46],[19,11],[10,22],[19,0],[0,9],[2,20],[16,64],[10,37],[16,49],[4,20],[20,68],[10,38],[17,59],[15,54],[17,60],[19,18],[0,60],[9,62],[3,69],[10,44],[15,2],[14,44],[17,0],[18,42],[17,28],[11,10],[11,42],[11,67],[0,32],[8,0],[17,6],[7,26],[17,65],[17,66],[7,38],[8,17],[7,60],[0,16],[7,59],[18,8],[16,63],[7,0],[11,46],[0,7],[6,4],[2,63],[8,56],[18,18],[12,70],[2,15],[14,65],[13,52],[11,0],[10,48],[7,8],[11,44],[0,35],[4,64],[6,36],[16,17],[7,34],[1,33],[11,60],[17,11],[4,58],[4,9],[18,7],[15,40],[11,24],[17,3],[7,9],[1,38],[1,14],[15,21],[14,68],[14,69],[16,40],[5,60],[18,46],[15,51],[7,65],[1,34],[15,55],[19,63],[5,35],[20,9],[13,1],[20,69],[19,67],[17,44],[12,44],[10,49],[12,43],[14,21],[18,11],[11,9],[4,56],[6,70],[8,54],[1,55],[17,47],[18,38],[3,31],[16,37],[13,7],[15,6],[18,33],[4,60],[17,40],[7,3],[3,32],[13,41],[5,62],[17,4],[20,5],[15,32],[19,31],[8,69],[19,58],[3,35],[6,64],[0,37],[15,56],[6,46],[4,42],[4,51],[2,7],[7,13],[20,47],[10,29],[12,18],[20,52],[5,5],[12,34],[1,57],[7,32],[3,58],[14,29],[2,32],[2,46],[14,5],[3,9],[19,68],[18,16],[19,2],[6,23],[20,3],[10,69],[9,0],[0,13],[20,38],[6,14],[0,21],[6,50],[2,5],[1,20],[5,20],[1,5],[10,0],[7,6],[15,13],[8,21],[7,14],[9,9],[19,8],[13,25],[5,30],[1,16],[18,19],[16,44],[4,5],[15,37],[20,14],[20,8],[5,23],[13,44],[17,56],[13,62],[2,18],[1,58],[17,2],[20,40],[8,9],[8,52],[6,24],[19,65],[7,48],[20,51],[2,21],[7,39],[11,27],[7,22],[12,6],[19,12],[12,66],[0,55],[20,62],[11,20],[2,35],[2,0],[6,7],[5,41],[9,37],[8,44],[16,15],[9,48],[18,54],[19,52],[19,24],[19,46],[5,0],[19,50],[2,37],[18,31],[6,20],[4,59],[5,39],[9,38],[19,51],[3,67],[11,33],[7,57],[13,47],[20,64],[8,24],[13,69],[4,11],[4,46],[13,32],[18,3],[20,54],[18,17],[7,5],[15,12],[12,7],[6,11],[5,4],[17,26],[7,12],[12,68],[8,45],[8,2],[15,34],[12,20],[1,26],[6,54],[19,16],[0,17],[9,13],[4,65],[12,58],[11,52],[8,32],[18,32],[11,50],[9,50],[17,13],[11,17],[16,53],[18,26],[2,42],[14,58],[0,23],[19,44],[9,39],[15,47],[11,70],[10,35],[8,41],[15,39],[20,50],[2,50],[17,39],[1,28],[7,63],[16,61],[15,58],[19,17],[11,40],[20,46],[12,41],[6,32],[2,67],[4,52],[14,24],[0,43],[17,34],[6,56],[2,53],[1,69],[0,11],[16,48],[1,47],[14,12],[7,23],[8,37],[17,18],[7,27],[7,2],[10,63],[13,6],[3,23],[12,8],[1,52],[11,30],[9,57],[16,57],[9,58],[4,38],[18,36],[10,17],[20,24],[13,64],[18,37],[4,21],[17,33],[2,33],[15,10],[8,40],[14,52],[19,1],[2,45],[11,55],[3,40],[8,31],[20,57],[6,33],[6,22],[6,28],[2,11],[4,15],[4,31],[16,26],[9,27],[10,61],[5,52],[3,68],[0,19],[13,40],[0,52],[18,22],[1,24],[13,29],[12,33],[16,58],[19,66],[6,62],[18,40],[17,58],[2,34],[15,63],[8,23],[14,50],[20,16],[6,9],[8,1],[3,0],[20,10],[15,23],[1,0],[13,4],[8,25],[10,13],[12,9],[18,39],[3,24],[20,63],[16,39],[7,36],[15,65],[13,10],[19,20],[3,54],[12,35],[17,49],[17,31],[14,48],[18,65],[2,44],[9,51],[17,64],[16,36],[7,10],[5,9],[12,13],[6,59],[13,21],[8,14],[10,67],[20,56],[6,53],[18,25],[14,39],[8,70],[10,27],[0,48],[0,36],[12,56],[3,28],[15,14]]))


    # expected:
    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,85,86,87,88,89,90,91,92,93,94,95,96,97,98,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,126,127,128,129,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,156,157,158,159,160,161,162,163,164,165,166,167,166,167,168,169,170,171,172,173,174,175,176,177,178,178,179,180,181,182,183,184,185,186,187,188,189,190,191,191,192,193,194,195,195,196,197,197,198,199,200,200,201,202,203,203,204,205,205,204,205,206,207,208,208,209,210,211,212,213,214,215,216,216,217,218,219,220,221,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,240,241,242,243,244,245,245,246,247,247,248,249,250,251,252,253,254,254,254,254,255,256,257,258,259,260,261,262,263,264,265,266,266,267,268,269,270,271,272,273,274,273,274,275,276,277,277,276,277,278,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,298,299,300,301,302,303,303,303,303,304,305,306,306,307,308,309,310,311,312,313,313,314,314,315,315,316,317,318,318,319,320,321,322,323,323,324,325,326,327,328,329,330,331,332,333,333,334,335,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,356,357,358,359,360,361,362,362,363,364,365,366,367,367,368,369,369,370,369,370,370,371,372,373,374,375,376,377,378,379,380,381,381,382,383,384,385,385,386,387,388,388,389,390,390,391,391]
    # print(Solution().numIslands2(86, 92, [[24,21],[62,80],[53,58],[41,4],[13,56],[44,61],[42,31],[33,61],[12,54],[3,0],[55,28],[43,48],[52,16],[40,55],[84,11],[42,79],[45,44],[72,22],[60,3],[67,59],[42,74],[22,21],[8,34],[35,48],[35,87],[27,71],[12,71],[50,1],[64,49],[9,35],[85,57],[70,58],[75,54],[0,78],[60,60],[47,33],[25,72],[13,88],[77,32],[11,28],[68,52],[63,35],[65,91],[73,44],[67,57],[66,25],[57,57],[59,91],[75,16],[32,60],[54,66],[27,3],[65,44],[22,49],[45,81],[30,48],[36,0],[73,70],[5,29],[5,38],[49,35],[72,27],[18,48],[0,81],[24,55],[48,56],[84,80],[57,51],[82,20],[45,45],[75,9],[4,80],[73,16],[46,15],[40,67],[48,15],[60,82],[12,43],[10,34],[82,82],[81,26],[8,65],[40,80],[43,34],[50,75],[63,51],[13,71],[40,3],[81,63],[6,86],[12,62],[15,35],[52,73],[53,10],[16,82],[29,13],[43,83],[1,58],[80,25],[10,79],[23,21],[26,20],[32,34],[32,19],[46,34],[80,67],[34,5],[49,69],[78,6],[37,75],[2,63],[82,59],[24,18],[26,23],[56,64],[42,91],[50,33],[60,31],[67,10],[8,2],[20,53],[74,83],[52,70],[71,71],[1,83],[39,54],[23,14],[48,51],[35,11],[4,58],[26,24],[39,60],[84,83],[61,34],[42,80],[45,74],[45,64],[70,38],[12,58],[25,56],[49,79],[38,48],[7,11],[71,37],[29,22],[72,45],[3,44],[72,49],[34,79],[46,5],[69,75],[62,70],[29,45],[47,47],[16,23],[22,51],[72,62],[46,72],[82,54],[1,0],[44,90],[5,65],[12,61],[47,81],[61,75],[16,87],[21,39],[39,66],[33,90],[4,43],[17,77],[49,43],[48,37],[74,53],[3,43],[59,34],[49,67],[55,53],[43,58],[40,38],[9,75],[80,75],[19,24],[67,84],[7,42],[28,12],[69,49],[66,57],[59,17],[36,30],[80,15],[44,15],[54,43],[5,10],[35,55],[52,28],[5,91],[2,65],[6,49],[56,26],[23,66],[51,73],[28,10],[33,35],[51,4],[39,35],[26,25],[57,78],[37,13],[61,35],[41,10],[67,37],[10,13],[50,73],[34,51],[33,22],[35,66],[4,0],[66,0],[45,27],[32,22],[32,35],[36,16],[37,40],[65,69],[28,87],[46,47],[16,53],[0,10],[16,46],[71,73],[36,63],[46,90],[44,88],[25,88],[43,49],[18,45],[39,46],[20,71],[73,81],[64,13],[62,79],[15,21],[79,49],[25,5],[1,9],[35,7],[43,69],[9,17],[73,34],[54,20],[54,46],[75,46],[36,79],[0,40],[19,60],[21,8],[49,63],[40,72],[58,3],[24,70],[11,79],[19,73],[64,85],[46,59],[11,70],[13,41],[68,49],[39,8],[64,65],[17,82],[13,7],[48,0],[76,2],[10,36],[26,29],[3,24],[55,60],[5,80],[40,81],[44,83],[20,69],[75,7],[54,40],[16,37],[1,23],[36,39],[61,65],[2,50],[47,10],[56,44],[17,72],[49,61],[39,48],[79,69],[28,6],[33,69],[24,29],[34,25],[21,35],[65,60],[15,65],[36,40],[56,8],[65,10],[54,63],[9,23],[35,12],[44,89],[41,32],[9,56],[0,41],[29,18],[83,58],[58,37],[8,21],[3,27],[22,13],[34,38],[67,46],[20,59],[26,34],[38,67],[63,42],[77,15],[85,6],[2,14],[42,59],[61,27],[35,43],[76,18],[35,34],[51,16],[9,77],[2,17],[47,87],[60,57],[71,33],[34,43],[39,81],[33,91],[6,2],[61,18],[49,9],[71,32],[55,39],[82,42],[18,3],[84,66],[39,70],[57,70],[72,52],[79,48],[53,15],[68,10],[70,46],[74,34],[12,14],[47,12],[7,77],[9,74],[69,85],[31,69],[17,65],[75,59],[10,40],[65,90],[70,13],[65,4],[55,33],[30,38],[50,71],[66,28],[6,15],[34,47],[36,77],[32,5],[61,80],[43,32],[82,89],[22,52],[58,85],[30,19],[63,31],[33,87],[40,25],[64,78],[57,45],[80,12],[49,59],[53,49],[18,36],[77,24],[74,25],[0,84],[67,39],[22,58],[76,64],[21,24],[46,25],[62,90],[53,55],[32,91],[46,79],[39,79],[36,14],[76,53],[22,71],[4,32],[12,59],[65,20],[14,75],[82,52],[76,51],[85,86],[51,17],[13,19],[30,75],[36,62],[38,7],[9,76],[46,76],[54,49],[35,9],[51,61],[71,0],[61,16],[78,77],[26,54],[32,89],[79,82],[44,13],[60,66],[22,64],[63,36],[32,64],[44,22],[63,29],[1,16],[79,70],[63,57],[13,22],[51,23],[49,36],[69,17],[7,74],[4,33],[0,68],[5,49]]))






# LC input
# 3
# 3
# [[0,0],[0,1],[1,2],[2,1]]
# 3
# 3
# []
# 1
# 1
# [[0,1]]
# 3
# 3
# [[0,1],[1,2],[2,1],[1,0],[0,2],[0,0],[1,1]]
# 21
# 71
# [[19,28],[14,38],[15,44],[17,12],[6,19],[11,69],[2,30],[7,43],[19,6],[7,29],[10,21],[17,55],[20,66],[12,28],[11,64],[12,52],[18,15],[2,52],[10,20],[0,50],[16,5],[17,25],[12,67],[6,45],[13,17],[5,55],[10,42],[20,17],[3,26],[20,61],[14,10],[9,1],[9,69],[6,29],[11,53],[3,66],[4,45],[12,65],[11,35],[5,67],[18,35],[2,57],[12,12],[13,53],[9,65],[13,0],[3,18],[13,39],[5,54],[20,43],[19,29],[17,37],[17,45],[3,38],[2,61],[2,65],[3,21],[5,40],[10,4],[12,36],[2,8],[3,33],[15,4],[13,35],[0,45],[20,29],[10,66],[19,7],[0,46],[19,11],[10,22],[19,0],[0,9],[2,20],[16,64],[10,37],[16,49],[4,20],[20,68],[10,38],[17,59],[15,54],[17,60],[19,18],[0,60],[9,62],[3,69],[10,44],[15,2],[14,44],[17,0],[18,42],[17,28],[11,10],[11,42],[11,67],[0,32],[8,0],[17,6],[7,26],[17,65],[17,66],[7,38],[8,17],[7,60],[0,16],[7,59],[18,8],[16,63],[7,0],[11,46],[0,7],[6,4],[2,63],[8,56],[18,18],[12,70],[2,15],[14,65],[13,52],[11,0],[10,48],[7,8],[11,44],[0,35],[4,64],[6,36],[16,17],[7,34],[1,33],[11,60],[17,11],[4,58],[4,9],[18,7],[15,40],[11,24],[17,3],[7,9],[1,38],[1,14],[15,21],[14,68],[14,69],[16,40],[5,60],[18,46],[15,51],[7,65],[1,34],[15,55],[19,63],[5,35],[20,9],[13,1],[20,69],[19,67],[17,44],[12,44],[10,49],[12,43],[14,21],[18,11],[11,9],[4,56],[6,70],[8,54],[1,55],[17,47],[18,38],[3,31],[16,37],[13,7],[15,6],[18,33],[4,60],[17,40],[7,3],[3,32],[13,41],[5,62],[17,4],[20,5],[15,32],[19,31],[8,69],[19,58],[3,35],[6,64],[0,37],[15,56],[6,46],[4,42],[4,51],[2,7],[7,13],[20,47],[10,29],[12,18],[20,52],[5,5],[12,34],[1,57],[7,32],[3,58],[14,29],[2,32],[2,46],[14,5],[3,9],[19,68],[18,16],[19,2],[6,23],[20,3],[10,69],[9,0],[0,13],[20,38],[6,14],[0,21],[6,50],[2,5],[1,20],[5,20],[1,5],[10,0],[7,6],[15,13],[8,21],[7,14],[9,9],[19,8],[13,25],[5,30],[1,16],[18,19],[16,44],[4,5],[15,37],[20,14],[20,8],[5,23],[13,44],[17,56],[13,62],[2,18],[1,58],[17,2],[20,40],[8,9],[8,52],[6,24],[19,65],[7,48],[20,51],[2,21],[7,39],[11,27],[7,22],[12,6],[19,12],[12,66],[0,55],[20,62],[11,20],[2,35],[2,0],[6,7],[5,41],[9,37],[8,44],[16,15],[9,48],[18,54],[19,52],[19,24],[19,46],[5,0],[19,50],[2,37],[18,31],[6,20],[4,59],[5,39],[9,38],[19,51],[3,67],[11,33],[7,57],[13,47],[20,64],[8,24],[13,69],[4,11],[4,46],[13,32],[18,3],[20,54],[18,17],[7,5],[15,12],[12,7],[6,11],[5,4],[17,26],[7,12],[12,68],[8,45],[8,2],[15,34],[12,20],[1,26],[6,54],[19,16],[0,17],[9,13],[4,65],[12,58],[11,52],[8,32],[18,32],[11,50],[9,50],[17,13],[11,17],[16,53],[18,26],[2,42],[14,58],[0,23],[19,44],[9,39],[15,47],[11,70],[10,35],[8,41],[15,39],[20,50],[2,50],[17,39],[1,28],[7,63],[16,61],[15,58],[19,17],[11,40],[20,46],[12,41],[6,32],[2,67],[4,52],[14,24],[0,43],[17,34],[6,56],[2,53],[1,69],[0,11],[16,48],[1,47],[14,12],[7,23],[8,37],[17,18],[7,27],[7,2],[10,63],[13,6],[3,23],[12,8],[1,52],[11,30],[9,57],[16,57],[9,58],[4,38],[18,36],[10,17],[20,24],[13,64],[18,37],[4,21],[17,33],[2,33],[15,10],[8,40],[14,52],[19,1],[2,45],[11,55],[3,40],[8,31],[20,57],[6,33],[6,22],[6,28],[2,11],[4,15],[4,31],[16,26],[9,27],[10,61],[5,52],[3,68],[0,19],[13,40],[0,52],[18,22],[1,24],[13,29],[12,33],[16,58],[19,66],[6,62],[18,40],[17,58],[2,34],[15,63],[8,23],[14,50],[20,16],[6,9],[8,1],[3,0],[20,10],[15,23],[1,0],[13,4],[8,25],[10,13],[12,9],[18,39],[3,24],[20,63],[16,39],[7,36],[15,65],[13,10],[19,20],[3,54],[12,35],[17,49],[17,31],[14,48],[18,65],[2,44],[9,51],[17,64],[16,36],[7,10],[5,9],[12,13],[6,59],[13,21],[8,14],[10,67],[20,56],[6,53],[18,25],[14,39],[8,70],[10,27],[0,48],[0,36],[12,56],[3,28],[15,14]]
# 86
# 92
# [[24,21],[62,80],[53,58],[41,4],[13,56],[44,61],[42,31],[33,61],[12,54],[3,0],[55,28],[43,48],[52,16],[40,55],[84,11],[42,79],[45,44],[72,22],[60,3],[67,59],[42,74],[22,21],[8,34],[35,48],[35,87],[27,71],[12,71],[50,1],[64,49],[9,35],[85,57],[70,58],[75,54],[0,78],[60,60],[47,33],[25,72],[13,88],[77,32],[11,28],[68,52],[63,35],[65,91],[73,44],[67,57],[66,25],[57,57],[59,91],[75,16],[32,60],[54,66],[27,3],[65,44],[22,49],[45,81],[30,48],[36,0],[73,70],[5,29],[5,38],[49,35],[72,27],[18,48],[0,81],[24,55],[48,56],[84,80],[57,51],[82,20],[45,45],[75,9],[4,80],[73,16],[46,15],[40,67],[48,15],[60,82],[12,43],[10,34],[82,82],[81,26],[8,65],[40,80],[43,34],[50,75],[63,51],[13,71],[40,3],[81,63],[6,86],[12,62],[15,35],[52,73],[53,10],[16,82],[29,13],[43,83],[1,58],[80,25],[10,79],[23,21],[26,20],[32,34],[32,19],[46,34],[80,67],[34,5],[49,69],[78,6],[37,75],[2,63],[82,59],[24,18],[26,23],[56,64],[42,91],[50,33],[60,31],[67,10],[8,2],[20,53],[74,83],[52,70],[71,71],[1,83],[39,54],[23,14],[48,51],[35,11],[4,58],[26,24],[39,60],[84,83],[61,34],[42,80],[45,74],[45,64],[70,38],[12,58],[25,56],[49,79],[38,48],[7,11],[71,37],[29,22],[72,45],[3,44],[72,49],[34,79],[46,5],[69,75],[62,70],[29,45],[47,47],[16,23],[22,51],[72,62],[46,72],[82,54],[1,0],[44,90],[5,65],[12,61],[47,81],[61,75],[16,87],[21,39],[39,66],[33,90],[4,43],[17,77],[49,43],[48,37],[74,53],[3,43],[59,34],[49,67],[55,53],[43,58],[40,38],[9,75],[80,75],[19,24],[67,84],[7,42],[28,12],[69,49],[66,57],[59,17],[36,30],[80,15],[44,15],[54,43],[5,10],[35,55],[52,28],[5,91],[2,65],[6,49],[56,26],[23,66],[51,73],[28,10],[33,35],[51,4],[39,35],[26,25],[57,78],[37,13],[61,35],[41,10],[67,37],[10,13],[50,73],[34,51],[33,22],[35,66],[4,0],[66,0],[45,27],[32,22],[32,35],[36,16],[37,40],[65,69],[28,87],[46,47],[16,53],[0,10],[16,46],[71,73],[36,63],[46,90],[44,88],[25,88],[43,49],[18,45],[39,46],[20,71],[73,81],[64,13],[62,79],[15,21],[79,49],[25,5],[1,9],[35,7],[43,69],[9,17],[73,34],[54,20],[54,46],[75,46],[36,79],[0,40],[19,60],[21,8],[49,63],[40,72],[58,3],[24,70],[11,79],[19,73],[64,85],[46,59],[11,70],[13,41],[68,49],[39,8],[64,65],[17,82],[13,7],[48,0],[76,2],[10,36],[26,29],[3,24],[55,60],[5,80],[40,81],[44,83],[20,69],[75,7],[54,40],[16,37],[1,23],[36,39],[61,65],[2,50],[47,10],[56,44],[17,72],[49,61],[39,48],[79,69],[28,6],[33,69],[24,29],[34,25],[21,35],[65,60],[15,65],[36,40],[56,8],[65,10],[54,63],[9,23],[35,12],[44,89],[41,32],[9,56],[0,41],[29,18],[83,58],[58,37],[8,21],[3,27],[22,13],[34,38],[67,46],[20,59],[26,34],[38,67],[63,42],[77,15],[85,6],[2,14],[42,59],[61,27],[35,43],[76,18],[35,34],[51,16],[9,77],[2,17],[47,87],[60,57],[71,33],[34,43],[39,81],[33,91],[6,2],[61,18],[49,9],[71,32],[55,39],[82,42],[18,3],[84,66],[39,70],[57,70],[72,52],[79,48],[53,15],[68,10],[70,46],[74,34],[12,14],[47,12],[7,77],[9,74],[69,85],[31,69],[17,65],[75,59],[10,40],[65,90],[70,13],[65,4],[55,33],[30,38],[50,71],[66,28],[6,15],[34,47],[36,77],[32,5],[61,80],[43,32],[82,89],[22,52],[58,85],[30,19],[63,31],[33,87],[40,25],[64,78],[57,45],[80,12],[49,59],[53,49],[18,36],[77,24],[74,25],[0,84],[67,39],[22,58],[76,64],[21,24],[46,25],[62,90],[53,55],[32,91],[46,79],[39,79],[36,14],[76,53],[22,71],[4,32],[12,59],[65,20],[14,75],[82,52],[76,51],[85,86],[51,17],[13,19],[30,75],[36,62],[38,7],[9,76],[46,76],[54,49],[35,9],[51,61],[71,0],[61,16],[78,77],[26,54],[32,89],[79,82],[44,13],[60,66],[22,64],[63,36],[32,64],[44,22],[63,29],[1,16],[79,70],[63,57],[13,22],[51,23],[49,36],[69,17],[7,74],[4,33],[0,68],[5,49]]

if __name__ == "__main__":
    main()
