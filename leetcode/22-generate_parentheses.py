class Solution:
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        if n == 0:
            return ['']
        retlist = []
        string = ''
        return self.helper(n, n, retlist, string)

    def helper(self, left, right, retlist, string):
        if right < left:
            return
        if left == 0 and right == 0:
            retlist.append(string)
            return

        if left > 0:
            self.helper(left - 1, right, retlist, string + '(')

        if right > 0:
            self.helper(left, right - 1, retlist, string + ')')

        return retlist


def main():
    print(Solution().generateParenthesis(3))
    print(Solution().generateParenthesis(6))
    print(Solution().generateParenthesis(0))
    print(Solution().generateParenthesis(1))

    # expected

if __name__ == '__main__':
    main()

# expected
# ['((()))', '(()())', '(())()', '()(())', '()()()']

# ['']
# ['()']

# LC input
# 3
# 6
# 0
# 1


# Instructions
"""
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
"""