from sgk_test import test

def biggestplus(arr):
    i = 1
    _len = len(arr)
    _len2 = len(arr[0])
    big = 0
    retval = []
    while i < _len:
        j = 1
        while j < _len2:
            curr = arr[i][j]
            if i < _len-1 and j < _len2-1 and arr[i - 1][j] == curr and arr[i][j + 1] == curr and arr[i + 1][j] == curr and arr[i][j - 1] == curr:
                size = get_cross_size(i, j, curr, _len, _len2, 0, arr)
                if size > big:
                    big = size
                    retval = [i, j]

            j += 1
        i += 1
    return retval

def get_cross_size(i, j, val, _len, _len2, size, arr):
    if i < 0 or i > _len - 1 or j < 0 or j > _len2 - 1 or arr[i][j] != val:
        return size

    top = right = bott = left = 0
    x = i
    while x > 0 and arr[x-1][j] == val:
        x -= 1
        top += 1

    x = i
    y = j
    while y < _len2-1 and arr[x][y+1] == val:
        y += 1
        right += 1

    x = i
    y = j
    while x < _len-1 and arr[x+1][y] == val:
        x += 1
        bott += 1

    x = i
    y = j
    while y > 0 and arr[x][y-1] == val:
        y -= 1
        left += 1
    return min(top, left, right, bott)


def main():
    ######### TESTS ############
    test([2, 6], biggestplus([
       [6,8,0,5,9,6,7,8,9,7],
       [6,6,0,1,9,6,7,8,2,7],
       [7,7,7,7,7,7,7,7,7,7],
       [6,7,0,1,7,6,7,6,7,7],
       [6,6,0,1,6,6,7,6,9,7],
       [6,6,0,1,6,6,7,6,6,7],
       [1,1,1,1,1,1,7,1,1,7],
       [8,8,0,1,6,6,7,6,6,7],
       [1,1,1,1,1,1,7,6,5,7]]))

    test([1, 1], biggestplus([[1,2,3],
 [2,2,2],
 [4,2,5]]))

    test([3, 3], biggestplus([[3,3,3,3,3,3,3],
 [3,3,3,3,3,3,3],
 [3,3,3,3,3,3,3],
 [3,3,3,3,3,3,3],
 [3,3,3,3,3,3,3],
 [3,3,3,3,3,3,3],
 [3,3,3,3,3,3,3]]))
 #
    test([1, 3], biggestplus([[1,2,3,4,5],
 [1,2,4,4,4],
 [1,2,3,4,5],
 [2,2,2,4,5],
 [1,2,3,4,5]]))

    test([40, 9], biggestplus( [
     [9,8,7,5,4,1,2,3,3,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,4],
     [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4],
     [8,8,8,5,8,6,2,7,2,7,6,6,2,6,3,6,6,2,5,2,7,4,3,7,1,4],
     [9,8,7,5,7,7,2,7,2,7,7,7,2,1,3,3,1,2,1,2,7,4,3,7,1,4],
     [6,8,6,5,6,6,6,6,6,7,6,2,2,2,3,9,0,2,1,1,1,1,0,1,1,4],
     [5,8,7,5,5,5,2,5,5,7,5,5,5,5,3,9,0,0,0,0,0,0,0,0,0,4],
     [4,8,7,5,3,3,2,3,3,7,3,3,3,3,3,9,0,2,2,0,4,4,0,4,4,4],
     [4,8,7,5,4,6,2,3,3,7,3,3,3,3,3,3,3,3,3,0,1,1,0,2,1,4],
     [4,8,7,5,0,6,2,7,6,7,0,8,3,0,3,9,0,2,0,0,0,0,0,2,1,4],
     [4,8,7,5,1,1,2,1,6,7,1,8,1,1,3,9,3,3,3,3,3,3,0,3,1,4],
     [2,8,2,5,2,2,2,2,6,7,2,2,3,4,3,9,4,2,2,0,4,4,0,2,1,4],
     [4,2,7,5,9,4,4,4,6,7,4,4,4,4,3,4,4,4,9,9,9,9,0,2,1,4],
     [5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,0,5,5,5],
     [4,1,7,5,3,3,2,3,6,7,3,8,3,3,3,9,1,2,2,7,2,4,0,2,1,4],
     [4,1,7,5,7,7,7,7,6,7,7,7,7,7,3,7,7,2,2,7,2,5,0,2,1,4],
     [4,5,7,5,5,5,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,5,0,2,1,4],
     [4,1,7,5,2,6,2,7,6,7,4,8,8,4,3,9,4,2,2,7,2,5,0,2,1,4],
     [4,4,7,5,4,4,2,4,6,7,4,8,8,4,3,4,4,4,2,0,0,0,0,2,1,4],
     [4,0,7,6,6,6,6,6,6,6,6,6,6,6,3,6,3,3,2,3,3,3,0,2,1,4],
     [4,6,7,3,6,6,2,7,6,7,3,8,8,5,3,9,0,2,2,7,2,5,0,2,1,4],
     [2,2,7,2,2,8,2,8,6,7,8,8,8,8,8,8,8,2,2,2,2,2,8,9,2,4],
     [7,7,7,7,7,3,2,3,6,7,3,8,8,4,4,9,7,1,2,1,2,5,8,9,1,4],
     [4,1,7,3,2,5,2,6,6,7,3,5,8,4,4,9,5,1,2,7,2,5,8,9,1,4],
     [4,1,7,8,2,8,2,6,6,7,3,8,8,4,4,9,8,1,2,2,2,5,8,9,1,4],
     [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2,8,8,8,6,8,8,8],
     [9,0,7,8,2,0,2,6,6,7,3,9,8,4,4,9,3,1,2,2,3,5,6,9,1,5],
     [3,3,3,3,3,3,2,3,6,7,3,3,8,4,3,3,3,3,9,9,9,9,6,9,9,3],
     [9,2,0,8,8,2,2,6,6,3,3,9,8,4,1,9,3,2,6,2,3,5,6,2,8,5],
     [8,8,8,8,8,8,2,6,6,3,7,7,8,4,1,9,3,2,6,2,3,5,6,2,8,5],
     [9,1,1,8,8,1,2,6,6,3,3,7,8,4,1,7,7,2,2,7,3,5,6,2,0,7],
     [9,4,0,8,8,8,2,7,6,3,3,4,8,4,1,5,5,4,4,4,3,4,6,2,0,7],
     [9,8,0,9,8,7,2,6,6,3,3,7,8,4,7,6,6,4,0,0,3,4,6,2,0,7],
     [9,6,6,9,8,6,2,6,6,3,3,2,8,4,1,7,3,4,2,3,3,4,6,2,0,7],
     [9,8,0,9,8,1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,4,6,1,1,7],
     [9,9,9,9,9,9,2,9,4,3,3,2,1,4,1,0,8,4,8,4,8,4,6,0,0,7],
     [9,5,5,9,9,9,2,7,4,3,3,4,1,4,4,4,4,4,4,4,4,4,6,4,0,7],
     [9,3,0,9,9,9,2,7,6,3,3,5,1,4,3,5,5,7,2,4,7,4,6,4,4,7],
     [8,8,8,8,8,8,8,8,8,3,3,8,8,8,8,8,8,8,8,8,8,8,6,8,8,8],
     [9,9,9,9,9,9,2,9,9,3,3,5,1,9,9,4,4,4,4,4,4,4,6,4,8,7],
     [9,9,9,9,9,9,9,9,9,3,3,9,9,9,3,0,0,7,0,3,7,4,6,2,8,7],
     [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,6,2,8,7],
     [0,3,0,9,8,9,2,3,3,3,3,3,3,2,3,2,8,7,0,3,9,4,6,4,8,7],
     [6,3,6,9,8,9,2,3,6,3,3,2,1,7,3,7,8,7,0,3,7,4,6,4,8,7],
     [3,3,3,9,7,9,7,3,7,3,3,8,8,8,8,8,8,8,8,8,6,6,6,6,6,6],
     [5,3,5,9,2,9,2,7,6,3,3,5,1,5,3,5,8,5,4,4,4,4,6,4,8,7],
     [2,3,2,9,2,9,2,2,0,3,3,4,4,4,4,4,8,4,4,4,4,4,6,4,8,7],
     [5,3,0,9,3,3,3,3,3,3,3,3,3,5,3,5,8,7,0,5,5,4,6,6,8,7]]))

    test([2, 2], biggestplus([[1,2,3,4],
 [1,2,3,4],
 [1,3,3,3],
 [1,2,3,4]]))

if __name__ == "__main__":
    main()

