<<<<<<< HEAD
"""
Module 7-github_commits - list 10 commits (from the most recent to oldest) of
                          the repository “rails” by the user “rails” using the
                          Github API.
                          (https://developer.github.com/v3/repos/commits/)
"""
"""
100-github_commits.py
"""
import requests
import sys


def request_to_github(the_url):
    """makes a request for commits from input url"""
    r = requests.get(the_url)
    the_json = r.json()
    c_range = 10 if len(the_json) >= 10 else len(the_json)
    for i in range(c_range):
        c = the_json[i]
        c_sha = c.get('sha')
        c_author = c.get('commit').get('author').get('name')
        print('{}: {}'.format(c_sha, c_author))
#
# if __name__ == "__main__":
#     """MAIN APP"""
#     the_url = ('https://api.github.com/repos/{}/{}/commits'
#                .format(sys.argv[2], sys.argv[1]))
#     request_to_github(the_url)


def main():
    import requests
    import sys

    # repo = sys.argv[1]
    # owner = sys.argv[2]
    repo = "rails"
    owner = "rails"

    url = "https://api.github.com/repos/{}/{}/commits".format(owner, repo)
    r = requests.get(url)
    j = r.json()
    if j == []:
        print("No result")
    else:
        if len(j) >= 10:
            limit = 10
        else:
            limit = len(j);
        for i in range(limit):
            elem = j[i]
            sha = elem.get('sha')
            author = elem.get('commit').get('author').get('name')
            item = "{}: {}".format(sha, author)
            print(item)
=======
# level 1:
###
# #
###
# level 2:
#########
# ## ## #
#########
###   ###
# #   # #
###   ###
#########
# ## ## #
#########

# level 3:
###########################
# ## ## ## ## ## ## ## ## #
###########################
###   ######   ######   ###
# #   # ## #   # ## #   # #
###   ######   ######   ###
###########################
# ## ## ## ## ## ## ## ## #
###########################
#########         #########
# ## ## #         # ## ## #
#########         #########
###   ###         ###   ###
# #   # #         # #   # #
###   ###         ###   ###
#########         #########
# ## ## #         # ## ## #
#########         #########
###########################
# ## ## ## ## ## ## ## ## #
###########################
###   ######   ######   ###
# #   # ## #   # ## #   # #
###   ######   ######   ###
###########################
# ## ## ## ## ## ## ## ## #
###########################


# level:4
#################################################################################
# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #
#################################################################################
###   ######   ######   ######   ######   ######   ######   ######   ######   ###
# #   # ## #   # ## #   # ## #   # ## #   # ## #   # ## #   # ## #   # ## #   # #
###   ######   ######   ######   ######   ######   ######   ######   ######   ###
#################################################################################
# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #
#################################################################################
#########         ##################         ##################         #########
# ## ## #         # ## ## ## ## ## #         # ## ## ## ## ## #         # ## ## #
#########         ##################         ##################         #########
###   ###         ###   ######   ###         ###   ######   ###         ###   ###
# #   # #         # #   # ## #   # #         # #   # ## #   # #         # #   # #
###   ###         ###   ######   ###         ###   ######   ###         ###   ###
#########         ##################         ##################         #########
# ## ## #         # ## ## ## ## ## #         # ## ## ## ## ## #         # ## ## #
#########         ##################         ##################         #########
#################################################################################
# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #
#################################################################################
###   ######   ######   ######   ######   ######   ######   ######   ######   ###
# #   # ## #   # ## #   # ## #   # ## #   # ## #   # ## #   # ## #   # ## #   # #
###   ######   ######   ######   ######   ######   ######   ######   ######   ###
#################################################################################
# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #
#################################################################################
###########################                           ###########################
# ## ## ## ## ## ## ## ## #                           # ## ## ## ## ## ## ## ## #
###########################                           ###########################
###   ######   ######   ###                           ###   ######   ######   ###
# #   # ## #   # ## #   # #                           # #   # ## #   # ## #   # #
###   ######   ######   ###                           ###   ######   ######   ###
###########################                           ###########################
# ## ## ## ## ## ## ## ## #                           # ## ## ## ## ## ## ## ## #
###########################                           ###########################
#########         #########                           #########         #########
# ## ## #         # ## ## #                           # ## ## #         # ## ## #
#########         #########                           #########         #########
###   ###         ###   ###                           ###   ###         ###   ###
# #   # #         # #   # #                           # #   # #         # #   # #
###   ###         ###   ###                           ###   ###         ###   ###
#########         #########                           #########         #########
# ## ## #         # ## ## #                           # ## ## #         # ## ## #
#########         #########                           #########         #########
###########################                           ###########################
# ## ## ## ## ## ## ## ## #                           # ## ## ## ## ## ## ## ## #
###########################                           ###########################
###   ######   ######   ###                           ###   ######   ######   ###
# #   # ## #   # ## #   # #                           # #   # ## #   # ## #   # #
###   ######   ######   ###                           ###   ######   ######   ###
###########################                           ###########################
# ## ## ## ## ## ## ## ## #                           # ## ## ## ## ## ## ## ## #
###########################                           ###########################
#################################################################################
# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #
#################################################################################
###   ######   ######   ######   ######   ######   ######   ######   ######   ###
# #   # ## #   # ## #   # ## #   # ## #   # ## #   # ## #   # ## #   # ## #   # #
###   ######   ######   ######   ######   ######   ######   ######   ######   ###
#################################################################################
# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #
#################################################################################
#########         ##################         ##################         #########
# ## ## #         # ## ## ## ## ## #         # ## ## ## ## ## #         # ## ## #
#########         ##################         ##################         #########
###   ###         ###   ######   ###         ###   ######   ###         ###   ###
# #   # #         # #   # ## #   # #         # #   # ## #   # #         # #   # #
###   ###         ###   ######   ###         ###   ######   ###         ###   ###
#########         ##################         ##################         #########
# ## ## #         # ## ## ## ## ## #         # ## ## ## ## ## #         # ## ## #
#########         ##################         ##################         #########
#################################################################################
# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #
#################################################################################
###   ######   ######   ######   ######   ######   ######   ######   ######   ###
# #   # ## #   # ## #   # ## #   # ## #   # ## #   # ## #   # ## #   # ## #   # #
###   ######   ######   ######   ######   ######   ######   ######   ######   ###
#################################################################################
# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #
#################################################################################"""

from sgk_test import test
def menger(level):
    def recurse(sponge, idx, level):
        if idx == level-1:
            return sponge
        for i, row in enumerate(sponge):
            sponge[i] = row * 3
        x = sponge * 3
        _len = len(x[0])
        div = _len // 3
        mid_start = div
        mid_end = (div *2)-1
        for i in range(len(x)):
            if i >= mid_start and i <= mid_end:
                lst = list(x[i])
                for j in range(len(lst)):
                    if j >= mid_start and j <= mid_end:
                        lst[j] = " "
                x[i] = ''.join(lst)
        print_sponge(x)
        return recurse(x, idx+1, level)


    if level == 0:
        return "#"
    sponge = ["###", "# #", "###"]
    if level == 1:
        return '\n'.join(sponge)
    retval = recurse(sponge, 0, level)
    print('\n'.join(retval))
    return '\n'.join(retval)

def print_sponge(sponge):
    for row in sponge:
        print(row)






def main():
    ######### TESTS ############
    # test("###\n# #\n###", menger_sponge(1))
    # test(None, menger_sponge(2))
    # test(None, menger_sponge(3))
    test("", menger(4))
>>>>>>> 0be48e26caab2bdee4e570b5a3cd4b3207a8fed5

if __name__ == "__main__":
    main()